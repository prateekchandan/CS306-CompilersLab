// Generated by Flexc++ V1.08.00 on Wed, 14 Jan 2015 16:02:48 +0530

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

// $insert baseclass_h
#include "Scannerbase.h"


// $insert classHead
class Scanner: public ScannerBase
{
    public:
        explicit Scanner(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        Scanner(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();
			enum Tokens{
				VOID = 0x100,
				INT = 0x101,
				FLOAT = 0x102,
				RETURN = 0x103,
				IF = 0x104,
				ELSE = 0x105,
				WHILE = 0x106,
				FOR = 0x107,
				OR_OP = 0x108,
				AND_OP = 0x109,
				EQ_OP = 0x10a,
				NE_OP = 0x10b,
				LE_OP = 0x10c ,
				GE_OP = 0x10d ,
				INC_OP = 0x10e ,
				DEC_OP = 0x110 ,
				STRING_LITERAL = 0x111,	
				IDENTIFIER = 0x112 ,
				INT_CONSTANT = 0x113 ,
				FLOAT_CONSTANT = 0x114
			};

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum__ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline Scanner::Scanner(std::istream &in, std::ostream &out)
:
    ScannerBase(in, out)
{}

inline Scanner::Scanner(std::string const &infile, std::string const &outfile)
:
    ScannerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int Scanner::lex()
{
    return lex__();
}

inline void Scanner::preCode() 
{
    // optionally replace by your own code
}

inline void Scanner::postCode(PostEnum__ type) 
{
    // optionally replace by your own code
}

inline void Scanner::print() 
{
    print__();
}


#endif // Scanner_H_INCLUDED_

